import create-datasource as ds

ADMIN_SERVER = '{{ oracle_wlst_create_domain_info.adminserver.name }}'

DOMAIN_PATH = '{{ oracle_wlst_create_domain_domains_home }}/{{ oracle_wlst_create_domain_info.name }}'
APP_PATH = '{{ oracle_wlst_create_domain_applications_home }}/{{ oracle_wlst_create_domain_info.name }}'

def createDatasource(ds_name, ds_targets, ds_jdbc_driver, ds_jdbc_url, ds_schema_username, ds_schema_password):
  print 'creating ' + ds_name
  create(ds_name, 'JDBCSystemResource')
  cd('/JDBCSystemResource/' + ds_name)
  set('Target',ds_targets)

  cd('/JDBCSystemResource/' + ds_name+ '/JdbcResource/' + ds_name)
  cmo.setName(ds_name)

  print 'create JDBCDataSourceParams'
  cd('/JDBCSystemResource/' + ds_name+ '/JdbcResource/' + ds_name)
  create('myJdbcDataSourceParams','JDBCDataSourceParams')
  cd('JDBCDataSourceParams/NO_NAME_0')
  set('JNDIName', java.lang.String('jdbc/' + ds_name))
  set('GlobalTransactionsProtocol', java.lang.String('None'))

  print 'create JDBCDriverParams'
  cd('/JDBCSystemResource/' + ds_name+ '/JdbcResource/' + ds_name)
  create('myJdbcDriverParams','JDBCDriverParams')
  cd('JDBCDriverParams/NO_NAME_0')
  set('DriverName',ds_jdbc_driver)
  set('URL',ds_jdbc_url)
  set('PasswordEncrypted', ds_schema_password)
  set('UseXADataSourceInterface', 'false')

  print 'create JDBCDriverParams Properties'
  create('myProperties','Properties')
  cd('Properties/NO_NAME_0')
  create('user','Property')
  cd('Property')
  cd('user')
  set('Value', ds_schema_username)

  print 'create JDBCConnectionPoolParams'
  cd('/JDBCSystemResource/' + ds_name+ '/JdbcResource/' + ds_name)
  create('myJdbcConnectionPoolParams','JDBCConnectionPoolParams')
  cd('JDBCConnectionPoolParams/NO_NAME_0')
  set('TestTableName','SQL SELECT 1 FROM DUAL')

# Select the template to use for creating the domain
{% for template in oracle_wlst_create_domain_info.templates %}
selectTemplate('{{ template.name }}', '{{ template.version }}')
{% endfor %}
loadTemplates()

# Set the listen address and listen port for the Administration Server
cd('/Servers/AdminServer')
# name of adminserver
set('Name',ADMIN_SERVER )

cd('/Servers/'+ADMIN_SERVER)

# address and port
set('ListenAddress','{{ oracle_wlst_create_domain_info.adminserver.listen_address }}')
set('ListenPort'   ,{{ oracle_wlst_create_domain_info.adminserver.listen_port }})

# Set the domain password for the WebLogic Server administration user
cd('/')
cd('Security/base_domain/User/{{ oracle_wlst_create_domain_info.adminuser.username }}')
cmo.setPassword('{{ oracle_wlst_create_domain_info.adminuser.password }}')

# If the domain already exists, overwrite the domain
setOption('OverwriteDomain', 'true')

{% for ds in oracle_wlst_create_domain_info.custom_datasources %}
ds.createDatasource('{{ ds.name }}', '{{ ds.targets }}', '{{ ds.jdbc_driver}}', '{{ ds.jdbc_url }}', '{{ ds.schema_username }}', '{{ ds.schema_password }}')
{% endfor %}

# write the domain and close the template
writeDomain(DOMAIN_PATH)
closeTemplate()

exit()
